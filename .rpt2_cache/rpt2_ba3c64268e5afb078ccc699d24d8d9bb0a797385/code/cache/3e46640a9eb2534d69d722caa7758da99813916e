{"code":"import * as tslib_1 from \"tslib\";\r\n/*\r\n    GRAPEVINE NODE INTEGRATION - https://grapevine.haus\r\n    envis10n <envis10n@protonmail.com> - https://github.com/envis10n\r\n    Mud Coders Guild - https://mudcoders.com\r\n    Join us on slack! https://slack.mudcoders.com\r\n    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n    @@@@@//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@(/@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n    @@@@@@//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n    @@@@@@@//@@@@@@/////%@///(///@@@@////@@@@//@//%@@@@@/////@@//@@@@//@@@///&@@@@//(///@@@@@/////@@@@@\r\n    @@@@@@@@//@@@@//@@%/%@@@//@@//@@@@@@//@@@///@//&@@@//@@@//@@//@@//@@@@@//&@@@@///@@%/%@@//@@@//@@@@\r\n    @@@@@@@//@@@@//@@@#/%@@@//@@@@@@//////@@@//@@@//@@////////@@@//%/#@@@@@//%@@@@//@@@#/%@////////@@@@\r\n    @@@@@@//@@@@@@//@&//%@@@//@@@@@(/(@@//@@@//@@//&@@@//@@@@@@@@////@@@@@@//%@@@@//@@@#/%@@//@@@@@@@@@\r\n    @@@@@//@@@@@@@@///%/%@/////@@@@@(///@//@@/////%@@@@@/////@@@@@//@@@@@%/////@@@//@@@%/%@@@/////@@@@@\r\n    @@@@@@@@@@@@@@@@@&//@@@@@@@@@@@@@@@@@@@@@//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n    @@@@@@@@@@@@@@@////@@@@@@@@@@@@@@@@@@@@@@//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n*/\r\nimport { EventEmitter as EE } from \"ee-ts\";\r\nimport { v4 } from \"uuid\";\r\nimport WebSocket from \"ws\";\r\nimport { parseAs } from \"./lib/json\";\r\nexport var GrapevineError;\r\n(function (GrapevineError) {\r\n    GrapevineError[GrapevineError[\"AUTHENTICATION_FAILED\"] = 4000] = \"AUTHENTICATION_FAILED\";\r\n    GrapevineError[GrapevineError[\"HEARTBEAT_FAILED\"] = 4001] = \"HEARTBEAT_FAILED\";\r\n})(GrapevineError || (GrapevineError = {}));\r\nexport class Typevine {\r\n    constructor(supports, userAgent = \"Typevine 0.0.1-dev\", version = \"2.3.0\") {\r\n        this.supports = supports;\r\n        this.userAgent = userAgent;\r\n        this.version = version;\r\n        this.events = {\r\n            channels: new EE(),\r\n            core: new EE(),\r\n            games: new EE(),\r\n            players: new EE(),\r\n            tells: new EE(),\r\n        };\r\n        this.socket = null;\r\n        this.channels = [];\r\n        this.eventCache = {};\r\n        this.refCache = new Map();\r\n        this.setupSocket();\r\n    }\r\n    setChannels(channels) {\r\n        this.channels = channels;\r\n    }\r\n    authenticate(id, secret) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            return this.waitEvent(\"authenticate\", {\r\n                channels: this.channels,\r\n                client_id: id,\r\n                client_secret: secret,\r\n                supports: this.supports,\r\n                user_agent: this.userAgent,\r\n                version: this.version,\r\n            });\r\n        });\r\n    }\r\n    subscribe(channel) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            return this.sendWithRef({\r\n                event: \"channels/subscribe\",\r\n                payload: {\r\n                    channel,\r\n                },\r\n            });\r\n        });\r\n    }\r\n    heartbeat(players) {\r\n        this.sendToVine({\r\n            event: \"heartbeat\",\r\n            payload: {\r\n                players,\r\n            },\r\n        });\r\n    }\r\n    unsubscribe(channel) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            return this.sendWithRef({\r\n                event: \"channels/unsubscribe\",\r\n                payload: {\r\n                    channel,\r\n                },\r\n            });\r\n        });\r\n    }\r\n    signIn(name) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            return this.sendWithRef({\r\n                event: \"players/sign-in\",\r\n                payload: {\r\n                    name,\r\n                },\r\n            });\r\n        });\r\n    }\r\n    signOut(name) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            return this.sendWithRef({\r\n                event: \"players/sign-out\",\r\n                payload: {\r\n                    name,\r\n                },\r\n            });\r\n        });\r\n    }\r\n    playerStatus() {\r\n        this.sendWithRef({\r\n            event: \"players/status\",\r\n        });\r\n    }\r\n    gameStatus(game) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            return this.sendWithRef({\r\n                event: \"games/status\",\r\n                payload: {\r\n                    game,\r\n                },\r\n            });\r\n        });\r\n    }\r\n    broadcast(channel, name, message) {\r\n        return this.sendWithRef({\r\n            event: \"channels/send\",\r\n            payload: {\r\n                channel,\r\n                message,\r\n                name,\r\n            },\r\n        });\r\n    }\r\n    send(from, to, game, message) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            return this.sendWithRef({\r\n                event: \"tells/send\",\r\n                payload: {\r\n                    from_name: from,\r\n                    message,\r\n                    sent_at: new Date().toISOString(),\r\n                    to_game: game,\r\n                    to_name: to,\r\n                },\r\n            });\r\n        });\r\n    }\r\n    syncAchievements() {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            return this.sendWithRef({\r\n                event: \"achievements/sync\",\r\n            });\r\n        });\r\n    }\r\n    createAchievement(achievement) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            return this.sendWithRef({\r\n                event: \"achievements/create\",\r\n                payload: achievement,\r\n            });\r\n        });\r\n    }\r\n    updateAchievement(update) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            return this.sendWithRef({\r\n                event: \"achievements/update\",\r\n                payload: update,\r\n            });\r\n        });\r\n    }\r\n    deleteAchievement(key) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            return this.sendWithRef({\r\n                event: \"achievements/delete\",\r\n                payload: {\r\n                    key,\r\n                },\r\n            });\r\n        });\r\n    }\r\n    setupSocket() {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            this.socket = new WebSocket(\"wss://grapevine.haus/socket\");\r\n            this.socket.on(\"close\", (code, reason) => {\r\n                if (code === GrapevineError.AUTHENTICATION_FAILED) {\r\n                    this.events.core.emit(\"disconnected\", {\r\n                        code,\r\n                        reason: \"Authentication failure.\",\r\n                    });\r\n                }\r\n                else if (code === GrapevineError.HEARTBEAT_FAILED) {\r\n                    this.events.core.emit(\"disconnected\", {\r\n                        code,\r\n                        reason: \"Heartbeat failure.\",\r\n                    });\r\n                }\r\n                else {\r\n                    this.events.core.emit(\"disconnected\");\r\n                }\r\n                if (this.restart !== undefined) {\r\n                    setTimeout(this.setupSocket, this.restart + 20 * 1000);\r\n                }\r\n            });\r\n            this.socket.on(\"open\", () => {\r\n                if (this.restart !== undefined) {\r\n                    this.restart = undefined;\r\n                }\r\n                this.events.core.emit(\"connected\");\r\n            });\r\n            this.socket.on(\"message\", (data) => {\r\n                if (typeof data !== \"string\") {\r\n                    data = data.toString();\r\n                }\r\n                try {\r\n                    const dobj = parseAs(data);\r\n                    if (dobj.ref !== undefined) {\r\n                        const resolver = this.refCache.get(dobj.ref);\r\n                        if (resolver !== undefined) {\r\n                            resolver(dobj);\r\n                            return;\r\n                        }\r\n                    }\r\n                    const event = dobj.event.split(\"/\");\r\n                    const mod = event[0];\r\n                    const evCall = this.eventCache[mod];\r\n                    if (evCall !== undefined) {\r\n                        evCall(dobj);\r\n                        return;\r\n                    }\r\n                    const modevent = event[1];\r\n                    switch (mod) {\r\n                        case \"channels\":\r\n                            switch (modevent) {\r\n                                case \"broadcast\":\r\n                                    this.events.channels.emit(\"broadcast\", dobj.payload);\r\n                                    break;\r\n                            }\r\n                            break;\r\n                        case \"players\":\r\n                            switch (modevent) {\r\n                                case \"sign-in\":\r\n                                    this.events.players.emit(\"signIn\", dobj\r\n                                        .payload);\r\n                                    break;\r\n                                case \"sign-out\":\r\n                                    this.events.players.emit(\"signOut\", dobj.payload);\r\n                                    break;\r\n                                case \"status\":\r\n                                    this.events.players.emit(\"status\", dobj\r\n                                        .payload);\r\n                                    break;\r\n                            }\r\n                            break;\r\n                        case \"tells\":\r\n                            switch (modevent) {\r\n                                case \"receive\":\r\n                                    this.events.tells.emit(\"receive\", dobj\r\n                                        .payload);\r\n                                    break;\r\n                            }\r\n                            break;\r\n                        case \"games\":\r\n                            switch (modevent) {\r\n                                case \"connect\":\r\n                                case \"disconnect\":\r\n                                    this.events.games.emit(modevent, dobj.payload.game);\r\n                                    break;\r\n                            }\r\n                            break;\r\n                        case \"heartbeat\":\r\n                            this.events.core.emit(\"heartbeat\");\r\n                            break;\r\n                        case \"restart\":\r\n                            this.events.core.emit(\"restart\", dobj.payload\r\n                                .duration);\r\n                            this.restart = dobj.payload.duration;\r\n                            break;\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    //\r\n                }\r\n            });\r\n        });\r\n    }\r\n    sendToVine(data) {\r\n        if (this.socket !== null) {\r\n            if (this.socket.readyState === 1) {\r\n                // Good to send (READYSTATE OPEN)\r\n                this.socket.send(JSON.stringify(data));\r\n                return true;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    sendWithRef(data) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            return new Promise((resolve, reject) => {\r\n                const ref = v4();\r\n                data.ref = ref;\r\n                this.refCache.set(ref, (arg) => {\r\n                    this.refCache.delete(ref);\r\n                    resolve(arg);\r\n                });\r\n                const sent = this.sendToVine(data);\r\n                if (!sent) {\r\n                    reject(\"Unable to send.\");\r\n                }\r\n            });\r\n        });\r\n    }\r\n    waitEvent(event, data) {\r\n        data = { event, payload: data };\r\n        return new Promise((resolve, reject) => {\r\n            this.eventCache[event] = (arg) => {\r\n                delete this.eventCache[event];\r\n                resolve(arg);\r\n            };\r\n            this.sendToVine(data);\r\n        });\r\n    }\r\n}\r\n","references":["/home/envis10n/Desktop/Repos/typevine/node_modules/ee-ts/lib/ee.d.ts","/home/envis10n/Desktop/Repos/typevine/node_modules/@types/uuid/index.d.ts","/home/envis10n/Desktop/Repos/typevine/node_modules/@types/ws/index.d.ts","/home/envis10n/Desktop/Repos/typevine/src/lib/json.ts","/home/envis10n/Desktop/Repos/typevine/src/modules/achievements.ts","/home/envis10n/Desktop/Repos/typevine/src/modules/channels.ts","/home/envis10n/Desktop/Repos/typevine/src/modules/core.ts","/home/envis10n/Desktop/Repos/typevine/src/modules/games.ts","/home/envis10n/Desktop/Repos/typevine/src/modules/players.ts","/home/envis10n/Desktop/Repos/typevine/src/modules/tells.ts"],"dts":{"name":"/home/envis10n/Desktop/Repos/typevine/index.d.ts","writeByteOrderMark":false,"text":"import { EventEmitter as EE } from \"ee-ts\";\r\nimport * as Achievements from \"./modules/achievements\";\r\nimport * as Channels from \"./modules/channels\";\r\nimport * as Core from \"./modules/core\";\r\nimport * as Games from \"./modules/games\";\r\nimport * as Players from \"./modules/players\";\r\nimport * as Tells from \"./modules/tells\";\r\nexport declare enum GrapevineError {\r\n    AUTHENTICATION_FAILED = 4000,\r\n    HEARTBEAT_FAILED = 4001\r\n}\r\ninterface IEventContainer {\r\n    core: EE<Core.IEvents>;\r\n    channels: EE<Channels.IEvents>;\r\n    players: EE<Players.IEvents>;\r\n    tells: EE<Tells.IEvents>;\r\n    games: EE<Games.IEvents>;\r\n}\r\nexport declare class Typevine {\r\n    private supports;\r\n    readonly userAgent: string;\r\n    readonly version: string;\r\n    events: IEventContainer;\r\n    private socket;\r\n    private channels;\r\n    private eventCache;\r\n    private refCache;\r\n    private restart?;\r\n    constructor(supports: string[], userAgent?: string, version?: string);\r\n    setChannels(channels: string[]): void;\r\n    authenticate(id: string, secret: string): Promise<Core.IAuthResult>;\r\n    subscribe(channel: string): Promise<Core.IResult>;\r\n    heartbeat(players?: string[]): void;\r\n    unsubscribe(channel: string): Promise<Core.IResult>;\r\n    signIn(name: string): Promise<Core.IResult>;\r\n    signOut(name: string): Promise<Core.IResult>;\r\n    playerStatus(): void;\r\n    gameStatus(game: string): Promise<Core.IResult<Games.IStatus>>;\r\n    broadcast(channel: string, name: string, message: string): Promise<Core.IResult>;\r\n    send(from: string, to: string, game: string, message: string): Promise<Core.IResult>;\r\n    syncAchievements(): Promise<Core.IResult<Achievements.IAchievementResponse[]>>;\r\n    createAchievement(achievement: Achievements.IAchievementCreate): Promise<Achievements.IResult>;\r\n    updateAchievement(update: Achievements.IAchievementUpdate): Promise<Achievements.IResult>;\r\n    deleteAchievement(key: string): Promise<Achievements.IResultDelete>;\r\n    private setupSocket;\r\n    private sendToVine;\r\n    private sendWithRef;\r\n    private waitEvent;\r\n}\r\nexport {};\r\n"}}
